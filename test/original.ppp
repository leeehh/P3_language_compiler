lreglen = 72 bytes ;

creglen = 24 bytes ;

pset = { ethernet,					//hdr_id:01
         ieee802-1qTag,				//hdr_id:02
         ipv4,						//hdr_id:03
         mpls,						//hdr_id:04
         ieee802-1OuterTag,			//hdr_id:05   	QinQ
         lldp,						//hdr_id:06
         trill,						//hdr_id:07
         qcn,						//hdr_id:08
         igmp,						//hdr_id:09
         ospf,						//hdr_id:0a
         pim,						//hdr_id:0b
         tcp,						//hdr_id:0c
         udp						//hdr_id:0d
       };

lset = {  l2,
          l2s,
          l3,
          l3s,
          l4
        };


// register FRA : ?;       // needed?

// register PRK : ?;       // needed?


//global IRF length    
const global_IRF_len = 64;

//general purpose    

IRF_gp_reg0_2b = IRF[global_IRF_len+1:global_IRF_len];	 //65:64
IRF_gp_reg1_2b = IRF[global_IRF_len+3:global_IRF_len+2]; //67:66


//every layer generates 72Bytes IRF, the post layer can fetch the front layer's IRF.
//IRF unit is merged mannually.


l2{
    //l2 layer IRFs
    //cellA IRF
    ARegisters {
	//IRF_l2_offset_8b = IRF[7:0];						//ASIC
	//set
	IRF_l2_send_to_cpu_8b = IRF[15:8];
	IRF_tag_type_2b = IRF[23:16];
	IRF_pkt_type_3b = IRF[31:24];
	IRF_l2_protocol_flag_type_8b = IRF[39:32];
	//mov
	IRF_outer_vlan_high = IRF[199:192];
	IRF_outer_vlan_low = IRF[207:200];
	IRF_inner_vlan_high = IRF[215:208];
	IRF_inner_vlan_low = IRF[223:216];
    }

    //cellB0 IRF
    B0Registers {
			IRF_l2_type = IRF[7:0];		
    }
		
    //cellB1 IRF

    ethernet eth;
    ieee802-1qTag vlan;
    ieee802-1OuterTag qinq;
    cellA {
    	if ((eth.etherType == 0x8100) && (vlan.etherType == 0x0800))
    	      length = length(eth) + length(vlan);
            next_header = ipv4;
            bypass = 1;
    	      action = {
      	          mov IRF_outer_vlan_high++IRF_outer_vlan_low, vlan.pcp++vlan.cfi++vlan.vid;
  	          set IRF_tag_type_2b, 1;    // single-tagged(st)
    	          set IRF_pkt_type_3b, 0;
    		}
    	elseif ((eth.etherType == 0x88a8 || eth.etherType == 0x9200 || eth.etherType == 0x9300) && (qinq.ethertype_o == 0x8100) && (qinq.etherType_i == 0x0800))
    	      length = length(eth) + length(qinq);
    	      next_header = ipv4;
            bypass = 1;
    	      action = {
    		    mov IRF_outer_vlan_high++IRF_outer_vlan_low, qinq.pcp_o++qinq.cfi_o++qinq.vid_o;
    		    mov IRF_inner_vlan_high++IRF_inner_vlan_low, qinq.pcp_i++qinq.cfi_i++qinq.vid_i;
    		    set IRF_tag_type_2b, 2;  // double-tagged(dt)
    		    set IRF_pkt_type_3b, 0;
  		}
    	elseif(eth.etherType == 0x0800)  //ipv4
    	      length = length(eth);
    	      next_header = ipv4;
    	      bypass = 1;
    	      action = {
    		    set IRF_tag_type_2b, 0;    // untagged(ut)
    		    set IRF_pkt_type_3b, 0;
    	      }
    	elseif(eth.etherType == 0x88CC)							        	      length = length(eth);
		next_header = lldp;
    		bypass = 2;
    	      action = {
    	 	    set IRF_l2_protocol_flag_type_8b, 66;	 //l2 protocol flag and type
    	      }
    	else
    		     bypass = 2;
    	      action = {
    		    set IRF_l2_send_to_cpu_8b, 1;	 //send to cpu if l2 unmatched
    	      }
    	endif
    }
		
    cellB0 {
    	if(eth.dmac == 0xFFFFFFFFFFFF)
    		set IRF_l2_type,3;					//bc
    	elseif(eth.dmac[40] == 1)
    		set IRF_l2_type, 2;					//mc
    	else
    		set IRF_l2_type, 1;					//sc
    	endif    
    }    	
}

l2s{
    //l2 layer IRFs
}

l3{
    //l2 layer IRFs
    //cellA IRF
    ARegisters {
    	//IRF_l3_offset_8b = IRF[7:0];			//ASIC: l2_offset+length
    	//set
    	IRF_l3_send_to_cpu_8b = IRF[7:0];
    	IRF_l3_encode = IRF[15:8];
    	IRF_l3_type = IRF[23:16];		 //no multi case and single cast
    	IRF_l3_protocol_flag_type_8b = IRF[31:24];
    	//mov
    	IRF_TOS_8b = IRF[199:192];
    	IRF_ttl_8b = IRF[207:200];
    	//alu
    	IRF_TTL_EXP = IRF[391:384];
    }
    //cellB0 IRF
    B0Registers {
    	//set
    	IRF_DIP_LB_MUL = IRF[7:0];
    	IRF_IPV4_IP_SPECIAL = IRF[15:8];
    	IRF_IPV4_SIP_LB = IRF[23:16];
    }
    //cellB1 IRF
    B1Registers {
    	//set
    	IRF_IP_FRAG_STATUS = IRF[7:0];
    }
    
    ipv4 v4;
    cellA {
    	mov IRF_TOS_8b, v4.diffserv;
    	mov IRF_ttl_8b, v4.ttl;
    	lg IRF_TTL_EXP, 2, v4.ttl;    
    }
		
    cellB0 {
    	if(v4.srcAddr == 0x00000000)
    		set IRF_IPV4_IP_SPECIAL, 1;
    	elseif(v4.srcAddr[31:24] == 0x7f)
    		set IRF_IPV4_SIP_LB, 1;
    	endif
			
    	if(v4.dstAddr == 0xffffffff)
    		set IRF_IPV4_IP_SPECIAL, 1;
    	elseif(v4.dstAddr[31:24] == 0x7f)
    		set IRF_DIP_LB_MUL, 1;
    	elseif(v4.dstAddr[31:8] == 0xe000000)
    		set IRF_DIP_LB_MUL, 2;
    	elseif(v4.dstAddr[31:28] == 0xe)
    		set IRF_DIP_LB_MUL, 4;			
    	endif
    }
		
    cellB1 {			
    	if(v4.flagOffset == 0)
    		if(v4.flags == 0)
    			set IRF_IP_FRAG_STATUS, 3;
    		else
    			set IRF_IP_FRAG_STATUS, 1;
    	      endif
    	endif
    }
    
//    mpls mpls_h1,mpls_h2,mpld_h3,mpls_h4,mpls_h5;
//    if(mpls_h1.s == 0)
//    	 mov IRF_ttl_8b,mpls_h1.ttl;
//    	 mov IRF_TOS_8b,mpls_h1.tos;
//    	 if(mpls_h2.s == 0)
//    		if(mpls_h3.s == 0)
//    			if(mpls_h4.s == 0)
//    				if(mpls_h5.s == 0)
//    					set IRF_l3_send_to_cpu_1b, 1;	//send to cpu
//    				else					//5 mpls
//    					length = 20;
//    					action = {
//    							      set IRF_label_num_3b, 5;
//			 		}
//				endif
//			else						//4 mpls
//				      length = 16;
//				      action = {
//							set IRF_label_num_3b, 4;
//			 	      }
//			endif
//    		else							//3 mpls
//    				length = 12;
//    				bypass = 2; 	 //bypass all following layer
//    				action = {
//				      set IRF_label_num_3b, 3;
//    				}
//    		endif
//    	else								//2 mpls
//    		length = 8;
//    		bypass = 2;      //bypass all following layer
//    		action = {
//    				set IRF_label_num_3b, 2;
//    	      }
//    	endif	
//    else									//1 mpls
//    	length = 4;
//    	bypass = 2;   //bypass all following layer
//    	mov IRF_ttl_8b,mpls_h1.ttl;
//    	mov IRF_TOS_8b,mpls_h1.tos;  
//    	action = {
//    		set IRF_label_num_3b, 1;
//    	}					    
//    endif
}

protocol ethernet {
    fields = {
        dmac : 48;
        smac : 48;
        etherType : 16;
    }

    length = 14;							//unit:byte
}

protocol ieee802-1qTag {
    fields = {
        pcp        : 3;
        cfi        : 1;
        vid        : 12;
        etherType  : 16;
    }
    length = 4;
}

protocol ieee802-1OuterTag {
    fields = {
        pcp_o        : 3;
        cfi_o        : 1;
        vid_o        : 12;
        etherType_o  : 16;
        pcp_i        : 3;
        cfi_i        : 1;
        vid_i        : 12;
        etherType_i  : 16;
    }
    length = 8;
}

protocol mpls {
    fields = {
        lable  : 20;
        tc     : 3;
        s      : 1;
        ttl    : 8;
    }
    length = 4;
    if(s == 0)
    	next_header = mpls;
    endif
    
    action = {
    }
}

protocol ipv4 {
    fields = {
        version : 4;           //1
        ihl : 4;				//1
        diffserv : 8;			//2
        totalLen : 16;			//3,4
        identificaiton : 16;	//5,6
        flags : 3;				//7
        fragOffset : 13;		//7,8
        ttl : 8;				//9
        theProtocol : 8;		//10
        hdrChecksum : 16;		//11,12
        srcAddr : 32;			//13,14,15,16
        dstAddr : 32;			//17,18,19,20
        options : *;
    }

    if(ihl == 5)
    	  length = 20;
        action = { 
        	      set IRF_l3_type[3], 0;
    	  }
    elseif(ihl == 6)
    	length = 24;
      action = { 
        	      set IRF_l3_type[3], 1;
    	}
    elseif(ihl == 7)
      length = 28;
      action = { 
        	      set IRF_l3_type[3], 1;
    	}

    else
    	action = {
    			set IRF_l3_cpu_code_8b, 2;		 // l3 unmatched
    	}
    endif
    
    if(theProtocol == 2)
    	next_header = igmp;
    	bypass = 2;
    	action = {
    	      set IRF_l3_encode, 3;
    		set IRF_l3_type[1:0], 0;
    		set IRF_l3_protocol_flag_type_8b, 33;
    	}
    elseif(theProtocol == 4)
      next_header = ipv4;
      bypass = 0;
      action = {
            set IRF_l3_encode, 7;
      		set IRF_l3_type[1:0], 1;
      }    
    elseif(theProtocol == 6)
      next_header = tcp;
      bypass = 1;
    	action = { 
    	      set IRF_l3_encode, 1;
      		set IRF_l3_type[1:0], 2;
    	}
    elseif(theProtocol == 0x11)
      next_header = udp;
      bypass = 1;
      action = { 
      		set IRF_l3_encode, 0;
      		set IRF_l3_type[1:0], 2;
    	}
    else
    	set IRF_l3_send_to_cpu_1b, 1;
    endif
}