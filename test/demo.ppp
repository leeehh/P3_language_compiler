lreglen = 72 bytes;

creglen = 24 bytes;

pset = { 
    ethernet,
    ieee802-1qTag,
    ipv4,
    mpls,
    ieee802-1OuterTag,
    lldp,
    trill,
    qcn,
    igmp,
    ospf,
    pim,
    tcp,
    udp
};

lset = {  
    l2,
    l2s,
    l3,
    l3s,
    l4
};

const global_IRF_len = 64;

IRF_gp_reg0_2b = IRF[global_IRF_len+1:global_IRF_len];
IRF_gp_reg1_2b = IRF[global_IRF_len+3:global_IRF_len+2];

l2 {
    ARegisters {
        IRF_l2_send_to_cpu_8b = IRF[15:8];
        IRF_tag_type_2b = IRF[23:16];
        IRF_pkt_type_3b = IRF[31:24];
        IRF_l2_protocol_flag_type_8b = IRF[39:32];

        //IRF_outer_vlan_high = IRF[199:192];  
        //IRF_outer_vlan_low = IRF[207:200];
        //IRF_inner_vlan_high = IRF[215:208];
        //IRF_inner_vlan_low = IRF[223:216];
        IRF_outer_vlan_high = IRF[107:100]; 
        IRF_outer_vlan_low = IRF[99:92];
        IRF_inner_vlan_high = IRF[123:116];
        IRF_inner_vlan_low = IRF[115:108];
    }

    B0Registers {
        IRF_l2_type = IRF[7:0];        
    }

    ethernet eth;
    ieee802-1qTag vlan;
    ieee802-1OuterTag qinq;

   cellA {
        if ((eth.etherType == 0x8100) && (vlan.etherType == 0x0800))
            length = length(eth) + length(vlan);
            next_header = ipv4;
            bypass = 1;
            action = {
                  mov IRF_outer_vlan_high ++ IRF_outer_vlan_low, vlan.pcp ++ vlan.cfi ++ vlan.vid;
                  set IRF_tag_type_2b, 1;
                set IRF_pkt_type_3b, 0;
            }
        elseif ((eth.etherType == 0x88a8 || eth.etherType == 0x9200 || eth.etherType == 0x9300) && (qinq.etherType_o == 0x8100) && (qinq.etherType_i == 0x0800)) //ethertype_o
            length = length(eth) + length(qinq);
            next_header = ipv4;
            bypass = 1;
            action = {
                mov IRF_outer_vlan_high ++ IRF_outer_vlan_low, qinq.pcp_o ++ qinq.cfi_o ++ qinq.vid_o;
                mov IRF_inner_vlan_high ++ IRF_inner_vlan_low, qinq.pcp_i ++ qinq.cfi_i ++ qinq.vid_i;
                set IRF_tag_type_2b, 2;
                set IRF_pkt_type_3b, 0;
              }
        elseif (eth.etherType == 0x0800)
            length = length(eth);
            next_header = ipv4;
            bypass = 1;
            action = {
                set IRF_tag_type_2b, 0;
                set IRF_pkt_type_3b, 0;
            }
        else
            bypass = 2;
            action = {
                set IRF_l2_send_to_cpu_8b, 1;
            }
        endif
    }
        
    cellB0 {
        if (eth.dmac == 0xffffffff)
            set IRF_l2_type,3;
        elseif (eth.dmac[40] == 1)
            set IRF_l2_type, 2;
        else
            set IRF_l2_type, 1;
        endif    
    }        
}

l2s {

}

l3{
    ARegisters {
        IRF_l3_send_to_cpu_8b = IRF[7:0];
        IRF_l3_encode = IRF[15:8];
        IRF_l3_type = IRF[23:16];
        IRF_l3_protocol_flag_type_8b = IRF[31:24];

        //IRF_TOS_8b = IRF[199:192];
        //IRF_ttl_8b = IRF[207:200];

        //IRF_TTL_EXP = IRF[391:384];
        IRF_TOS_8b = IRF[99:92];
        IRF_ttl_8b = IRF[107:100];

        IRF_TTL_EXP = IRF[191:184];
    }

    B0Registers {
        IRF_DIP_LB_MUL = IRF[7:0];
        IRF_IPV4_IP_SPECIAL = IRF[15:8];
        IRF_IPV4_SIP_LB = IRF[23:16];
    }

    B1Registers {
        IRF_IP_FRAG_STATUS = IRF[7:0];
    }
    
    ipv4 v4;

    cellA {
        mov IRF_TOS_8b, v4.diffserv;
        mov IRF_ttl_8b, v4.ttl;
        lg IRF_TTL_EXP, 2, v4.ttl;
    }
        
    cellB0 {
        if (v4.srcAddr == 0x00000000)
            set IRF_IPV4_IP_SPECIAL, 1;
        elseif (v4.srcAddr[31:24] == 0x7f)
            set IRF_IPV4_SIP_LB, 1;
        endif
            
        if (v4.dstAddr == 0xffffffff)
            set IRF_IPV4_IP_SPECIAL, 1;
        elseif (v4.dstAddr[31:24] == 0x7f)
            set IRF_DIP_LB_MUL, 1;
        elseif (v4.dstAddr[31:8] == 0xe000000)
            set IRF_DIP_LB_MUL, 2;
        elseif (v4.dstAddr[31:28] == 0xe)
            set IRF_DIP_LB_MUL, 4;            
        endif
    }
        
    cellB1 {            
        if (v4.flagOffset == 0 && v4.flags == 0)
            set IRF_IP_FRAG_STATUS, 3;
        elseif (v4.flagOffset == 0)
            set IRF_IP_FRAG_STATUS, 1;
        endif
    }
}

protocol ethernet {
    fields = {
        dmac : 48;
        smac : 48;
        etherType : 16;
    }

    length = 14;
}

protocol ieee802-1qTag {
    fields = {
        pcp : 3;
        cfi : 1;
        vid : 12;
        etherType : 16;
    }

    length = 4;
}

protocol ieee802-1OuterTag {
    fields = {
        pcp_o : 3;
        cfi_o : 1;
        vid_o : 12;
        etherType_o : 16;
        pcp_i : 3;
        cfi_i : 1;
        vid_i : 12;
        etherType_i : 16;
    }

    length = 8;
}

protocol mpls {
    fields = {
        lable : 20;
        tc : 3;
        s : 1;
        ttl : 8;
    }

    length = 4;
    
    if (s == 0)
        next_header = mpls;
    endif
    
    action = {
    }
}

protocol ipv4 {
    fields = {
        version : 4;
        ihl : 4;
        diffserv : 8;
        totalLen : 16;
        identificaiton : 16;
        flags : 3;
        flagOffset : 13;
        ttl : 8;
        theProtocol : 8;
        hdrChecksum : 16;
        srcAddr : 32;
        dstAddr : 32;
        options : *;
    }

    if (ihl == 5)
        length = 20;
        action = { 
            set IRF_l3_type[3], 0;
        }
    elseif (ihl == 6)
        length = 24;
        action = { 
            set IRF_l3_type[3], 1;
        }
    elseif (ihl == 7)
        length = 28;
        action = {
            set IRF_l3_type[3], 1;
        }
    else
        action = {
            // set IRF_l3_cpu_code_8b, 2;  // IRF_l3_cpu_code_8b not defiend!
        }
    endif
    
    if (theProtocol == 4)
        next_header = ipv4;
        bypass = 0;
        action = {
            set IRF_l3_encode, 7;
            set IRF_l3_type[1:0], 1;
        }    
    elseif (theProtocol == 6)
      //  next_header = tcp; // tcp was not defined!
	next_header = ipv4;
        bypass = 1;
        action = { 
            set IRF_l3_encode, 1;
            set IRF_l3_type[1:0], 2;
        }
    elseif (theProtocol == 0x11)
      //  next_header = udp; // udp was not defined!
	next_header = ipv4;
        bypass = 1;
        action = { 
              set IRF_l3_encode, 0;
              set IRF_l3_type[1:0], 2;
        }
    else
       // set IRF_l3_send_to_cpu_1b, 1; // IRF_l3_send_to_cpu_1b not defined!
    endif
}
