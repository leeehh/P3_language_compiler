(**************************************
  Filename: Tokenizer.v
  Project:  P3 Compilers
  Author:   Ling.Li
  Date:     2018.06.20
**************************************)

Require Import String.
Require Import Parser.

Definition str := string.

Inductive token_id :=
(* keywords *)
  | PSET'token
  | LSET'token
  | CONST'token
  | TYPE'token
  | REGISTER'token
  | PROTOCOL'token
  | INT'token
  | HEXADECIMAL'token
  | BITS'token
  | NOT'token
  | INS_SET'token
  | INS_MOV'token
  | INS_EQ'token
  | INS_LG'token
  | IF'token
  | ELSE'token
  | ELSEIF'token
  | ENDIF'token
  | ACTION'token
  | NEXT_HEADER'token
  | LENGTH'token
  | FIELDS'token
  | VAR'token
  | OPTIONS'token
  | BYPASS'token
  | CELLA'token
  | CELLB0'token
  | CELLB1'token
  | AREGISTERS'token
  | B0REGISTERS'token
  | B1REGISTERS'token
  | LREGLEN'token
  | CREGLEN'token
  | BYTES'token
  | IRF'token
(* parentheses *)
  | LBRACE'token
  | RBRACE'token
  | LBRACKET'token
  | RBRACKET'token
  | LPAREN'token
  | RPAREN'token
(* characters *)
  | COMMA'token
  | SEMICOLON'token
  | COLON'token
  | EQ'token
  | DOT'token
(* operators *)
  | TILDE'token
  | ADD'token
  | SUB'token
  | MUL'token
  | DIV'token
  | MOD'token
  | ANDAND'token
  | OROR'token
  | AND'token
  | OR'token
  | XOR'token
  | EQEQ'token
  | NE'token
  | LES'token
  | GRE'token
  | LESEQ'token
  | GREEQ'token
  | LESLES'token
  | GREGRE'token
  | ADDADD'token
(* identifiers *)
  | IDENT'token : str -> token_id
  | CONST_INT'token : str -> token_id
  | CONST_HEX'token : str -> token_id
  | CONST_BIT'token : str -> token_id
(* end_of_file *)
  | EOF'token
  .

(*
    Helper function to make expressions in get_token more readable.
    Essentially, get_type just takes a terminal and a value of its
    corresponding semantic type, returning a token. This should likely be
    generated by "menhir --coq", but isn't yet.
*)
Definition get_type (t : Gram.terminal) (sst : Gram.symbol_semantic_type (Gram.T t)) : Gram.token :=
  existT (fun t' => Gram.symbol_semantic_type (Gram.T t')) t sst.

Definition get_token (t : token_id) : Aut.GramDefs.token :=
  match t with
(* keywords *)
    | PSET'token =>
      get_type Gram.PSET't tt
    | LSET'token =>
      get_type Gram.LSET't tt
    | CONST'token =>
      get_type Gram.CONST't tt
    | TYPE'token =>
      get_type Gram.TYPE't tt
    | REGISTER'token =>
      get_type Gram.REGISTER't tt
    | PROTOCOL'token =>
      get_type Gram.PROTOCOL't tt
    | INT'token =>
      get_type Gram.INT't tt
    | HEXADECIMAL'token =>
      get_type Gram.HEXADECIMAL't tt
    | BITS'token =>
      get_type Gram.BITS't tt
    | NOT'token =>
      get_type Gram.NOT't tt
    | INS_SET'token =>
      get_type Gram.INS_SET't tt
    | INS_MOV'token =>
      get_type Gram.INS_MOV't tt
    | INS_EQ'token =>
      get_type Gram.INS_EQ't tt
    | INS_LG'token =>
      get_type Gram.INS_LG't tt
    | IF'token =>
      get_type Gram.IF't tt
    | ELSE'token =>
      get_type Gram.ELSE't tt
    | ELSEIF'token =>
      get_type Gram.ELSEIF't tt
    | ENDIF'token =>
      get_type Gram.ENDIF't tt
    | ACTION'token =>
      get_type Gram.ACTION't tt
    | NEXT_HEADER'token =>
      get_type Gram.NEXT_HEADER't tt
    | LENGTH'token =>
      get_type Gram.LENGTH't tt
    | FIELDS'token =>
      get_type Gram.FIELDS't tt
    | VAR'token =>
      get_type Gram.VAR't tt
    | OPTIONS'token =>
      get_type Gram.OPTIONS't tt
    | BYPASS'token =>
      get_type Gram.BYPASS't tt
    | CELLA'token =>
      get_type Gram.CELLA't tt
    | CELLB0'token =>
      get_type Gram.CELLB0't tt
    | CELLB1'token =>
      get_type Gram.CELLB1't tt
    | AREGISTERS'token =>
      get_type Gram.AREGISTERS't tt
    | B0REGISTERS'token =>
      get_type Gram.B0REGISTERS't tt
    | B1REGISTERS'token =>
      get_type Gram.B1REGISTERS't tt
    | LREGLEN'token =>
      get_type Gram.LREGLEN't tt
    | CREGLEN'token =>
      get_type Gram.CREGLEN't tt
    | BYTES'token =>
      get_type Gram.BYTES't tt
    | IRF'token =>
      get_type Gram.IRF't tt
(* parentheses *)
    | LBRACE'token =>
      get_type Gram.LBRACE't tt
    | RBRACE'token =>
      get_type Gram.RBRACE't tt
    | LBRACKET'token =>
      get_type Gram.LBRACKET't tt
    | RBRACKET'token =>
      get_type Gram.RBRACKET't tt
    | LPAREN'token =>
      get_type Gram.LPAREN't tt
    | RPAREN'token =>
      get_type Gram.RPAREN't tt
(* characters *)
    | COMMA'token =>
      get_type Gram.COMMA't tt
    | SEMICOLON'token =>
      get_type Gram.SEMICOLON't tt
    | COLON'token =>
      get_type Gram.COLON't tt
    | EQ'token =>
      get_type Gram.EQ't tt
    | DOT'token =>
      get_type Gram.DOT't tt
(* operators *)
    | TILDE'token =>
      get_type Gram.TILDE't tt
    | ADD'token =>
      get_type Gram.ADD't tt
    | SUB'token =>
      get_type Gram.SUB't tt
    | MUL'token =>
      get_type Gram.MUL't tt
    | DIV'token =>
      get_type Gram.DIV't tt
    | MOD'token =>
      get_type Gram.MOD't tt
    | ANDAND'token =>
      get_type Gram.ANDAND't tt
    | OROR'token =>
      get_type Gram.OROR't tt
    | AND'token =>
      get_type Gram.AND't tt
    | OR'token =>
      get_type Gram.OR't tt
    | XOR'token =>
      get_type Gram.XOR't tt
    | EQEQ'token =>
      get_type Gram.EQEQ't tt
    | NE'token =>
      get_type Gram.NE't tt
    | LES'token =>
      get_type Gram.LES't tt
    | GRE'token =>
      get_type Gram.GRE't tt
    | LESEQ'token =>
      get_type Gram.LESEQ't tt
    | GREEQ'token =>
      get_type Gram.GREEQ't tt
    | LESLES'token =>
      get_type Gram.LESLES't tt
    | GREGRE'token =>
      get_type Gram.GREGRE't tt
    | ADDADD'token =>
      get_type Gram.ADDADD't tt
(* identifiers *)
    | IDENT'token str =>
      get_type Gram.IDENT't str
    | CONST_INT'token str =>
      get_type Gram.CONST_INT't str
    | CONST_HEX'token str =>
      get_type Gram.CONST_HEX't str
    | CONST_BIT'token str =>
      get_type Gram.CONST_BIT't str
(* end_of_file *)
    | EOF'token =>
      get_type Gram.EOF't tt
  end.